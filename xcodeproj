//
//  MyAppEntrypoint.swift
//  This file contains the main application structure and the primary view.
//
//  Created by DevAssist4-2-0 on 2025.
//

import SwiftUI // Import the SwiftUI framework for building user interfaces.

// MARK: - Main Application Structure
// This struct defines the entry point of your SwiftUI application.
// The @main attribute indicates that this is the starting point for your app.
@main
struct DevAssist4-2-0: App {
    // The 'body' property defines the app's scene graph.
    // A WindowGroup is a scene that presents a single window containing your app's content.
    var body: some Scene {
        WindowGroup {
            // The ContentView is the first view presented when the app starts.
            // This is where your app's main user interface will be displayed.
            ContentView()
        }
    }
}

// MARK: - Content View
// This struct defines the primary view of your application.
// SwiftUI views are declared as structs that conform to the 'View' protocol.
struct ContentView: View {
    // The 'body' property describes the content and layout of this view.
    var body: some View {
        // VStack arranges its contained views vertically.
        VStack {
            // Display a system icon from SF Symbols.
            // 'sparkles' is a common SF Symbol that looks like stars/sparkles.
            Image(systemName: "sparkles")
                .imageScale(.large) // Make the icon larger for better visibility.
                .foregroundStyle(.purple) // Apply a purple tint to the icon.
                .padding(.bottom, 10) // Add some space below the icon.

            // Display a text message.
            Text("Welcome to Your iOS App!")
                .font(.title) // Set a prominent title font.
                .fontWeight(.bold) // Make the text bold.
                .foregroundColor(.blue) // Set text color to blue.
                .padding(.bottom, 5) // Add some space below the title.

            Text("This is a basic SwiftUI application.")
                .font(.subheadline) // Use a smaller subheadline font.
                .foregroundColor(.gray) // Set text color to gray.

            // A simple button that prints a message when tapped.
            Button {
                // Action to perform when the button is tapped.
                // In a real app, you might navigate, perform calculations, etc.
                print("Button tapped!")
            } label: {
                // The visual content of the button.
                Text("Tap Me")
                    .font(.headline) // Set font for the button text.
                    .foregroundColor(.white) // White text color.
                    .padding(.horizontal, 20) // Horizontal padding.
                    .padding(.vertical, 10) // Vertical padding.
                    .background(Capsule().fill(Color.green)) // Green capsule shape background.
            }
            .padding(.top, 20) // Add space above the button.
        }
        .padding() // Add padding around the entire VStack to give it some breathing room.
        .background(
            // Apply a light background color with rounded corners to the whole view.
            RoundedRectangle(cornerRadius: 20)
                .fill(Color.white.opacity(0.9))
                .shadow(radius: 10) // Add a subtle shadow for depth.
        )
        .padding(20) // Outer padding to ensure the background doesn't touch screen edges.
    }
}

// MARK: - Preview Provider (for Xcode Canvas)
// This section is used by Xcode's canvas to show a live preview of your UI.
// If you are using an environment that supports SwiftUI previews, this will render
// the ContentView directly in a design canvas.
struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
import UIKit
import AVKit
import AVFoundation

class VideoPlayerViewController: UIViewController {

    // MARK: - Configuration

    let videoURLString = "https://www.learningcontainer.com/wp-content/uploads/2020/05/sample-mp4-file.mp4" // Replace with your actual video URL
    
    // MARK: - Properties

    private var playerViewController: AVPlayerViewController?

    // MARK: - Lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = .systemBackground
        setupCustomVideoButton()
    }

    // MARK: - UI Setup

    private func setupCustomVideoButton() {
        let playButton = UIButton(type: .system)
        playButton.setTitle("Launch Website Video (PiP Enabled)", for: .normal)
        playButton.titleLabel?.font = UIFont.systemFont(ofSize: 20, weight: .bold)
        playButton.backgroundColor = .systemBlue
        playButton.setTitleColor(.white, for: .normal)
        playButton.layer.cornerRadius = 10
        playButton.contentEdgeInsets = UIEdgeInsets(top: 15, left: 25, bottom: 15, right: 25)
        playButton.addTarget(self, action: #selector(playVideoFromWebsite), for: .touchUpInside)

        playButton.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(playButton)

        NSLayoutConstraint.activate([
            playButton.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            playButton.centerYAnchor.constraint(equalTo: view.centerYAnchor)
        ])
    }

    // MARK: - Actions

    @objc private func playVideoFromWebsite() {
        guard let url = URL(string: videoURLString) else {
            print("Error: Invalid video URL. Please check the 'videoURLString' variable.")
            return
        }

        let player = AVPlayer(url: url)
        playerViewController = AVPlayerViewController()
        playerViewController?.player = player

        do {
            try AVAudioSession.sharedInstance().setCategory(.playback, mode: .moviePlayback, options: .allowPictureInPicture)
            try AVAudioSession.sharedInstance().setActive(true)
        } catch {
            print("Failed to set audio session category for PiP: \(error.localizedDescription)")
        }

        if let playerVC = playerViewController {
            self.present(playerVC, animated: true) {
                playerVC.player?.play()
            }
        }
    }
}
